{:rename-macros {}, :renames {}, :externs {document {getElementById {}}}, :use-macros {includes? clojure.string, lower-case clojure.string, upper-case clojure.string}, :excludes #{}, :name beasts.core, :imports nil, :requires {s clojure.string, clojure.string clojure.string, r reagent.core, reagent.core reagent.core, beasts.data beasts.data}, :cljs.spec/speced-vars [], :uses {atom reagent.core, includes? clojure.string, lower-case clojure.string, upper-case clojure.string, all-beasts beasts.data}, :defs {toggle-series-filter {:protocol-inline nil, :meta {:file "/d/code/clojure/beasts/src/beasts/core.cljs", :line 76, :column 7, :end-line 76, :end-column 27, :arglists (quote ([app series e]))}, :name beasts.core/toggle-series-filter, :variadic false, :file "src/beasts/core.cljs", :end-column 27, :method-params ([app series e]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 76, :end-line 76, :max-fixed-arity 3, :fn-var true, :arglists (quote ([app series e]))}, front-beast-view {:protocol-inline nil, :meta {:file "/d/code/clojure/beasts/src/beasts/core.cljs", :line 51, :column 7, :end-line 51, :end-column 23, :arglists (quote ([{:keys [card-visible? image beast-name]}]))}, :name beasts.core/front-beast-view, :variadic false, :file "src/beasts/core.cljs", :end-column 23, :method-params ([p__3268503]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 51, :end-line 51, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [card-visible? image beast-name]}]))}, beast-attribute {:protocol-inline nil, :meta {:file "/d/code/clojure/beasts/src/beasts/core.cljs", :line 44, :column 7, :end-line 44, :end-column 22, :arglists (quote ([desc value]))}, :name beasts.core/beast-attribute, :variadic false, :file "src/beasts/core.cljs", :end-column 22, :method-params ([desc value]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 44, :end-line 44, :max-fixed-arity 2, :fn-var true, :arglists (quote ([desc value]))}, render-filters {:protocol-inline nil, :meta {:file "/d/code/clojure/beasts/src/beasts/core.cljs", :line 115, :column 7, :end-line 115, :end-column 21, :arglists (quote ([app beasts]))}, :name beasts.core/render-filters, :variadic false, :file "src/beasts/core.cljs", :end-column 21, :method-params ([app beasts]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 115, :end-line 115, :max-fixed-arity 2, :fn-var true, :arglists (quote ([app beasts]))}, element {:name beasts.core/element, :file "src/beasts/core.cljs", :line 163, :column 1, :end-line 163, :end-column 17, :meta {:file "/d/code/clojure/beasts/src/beasts/core.cljs", :line 163, :column 10, :end-line 163, :end-column 17}, :tag js}, render-beast {:protocol-inline nil, :meta {:file "/d/code/clojure/beasts/src/beasts/core.cljs", :line 91, :column 7, :end-line 91, :end-column 19, :arglists (quote ([app {:keys [beast-name visible? card-visible?], :as beast}]))}, :name beasts.core/render-beast, :variadic false, :file "src/beasts/core.cljs", :end-column 19, :method-params ([app p__3269076]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 91, :end-line 91, :max-fixed-arity 2, :fn-var true, :arglists (quote ([app {:keys [beast-name visible? card-visible?], :as beast}]))}, toggle-sort {:protocol-inline nil, :meta {:file "/d/code/clojure/beasts/src/beasts/core.cljs", :line 86, :column 7, :end-line 86, :end-column 18, :arglists (quote ([app sort-key e]))}, :name beasts.core/toggle-sort, :variadic false, :file "src/beasts/core.cljs", :end-column 18, :method-params ([app sort-key e]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 86, :end-line 86, :max-fixed-arity 3, :fn-var true, :arglists (quote ([app sort-key e]))}, filter-beasts {:protocol-inline nil, :meta {:file "/d/code/clojure/beasts/src/beasts/core.cljs", :line 24, :column 7, :end-line 24, :end-column 20, :arglists (quote ([filters filter-key beasts]))}, :name beasts.core/filter-beasts, :variadic false, :file "src/beasts/core.cljs", :end-column 20, :method-params ([filters filter-key beasts]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 24, :end-line 24, :max-fixed-arity 3, :fn-var true, :arglists (quote ([filters filter-key beasts]))}, render-search {:protocol-inline nil, :meta {:file "/d/code/clojure/beasts/src/beasts/core.cljs", :line 105, :column 7, :end-line 105, :end-column 20, :arglists (quote ([app]))}, :name beasts.core/render-search, :variadic false, :file "src/beasts/core.cljs", :end-column 20, :method-params ([app]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 105, :end-line 105, :max-fixed-arity 1, :fn-var true, :arglists (quote ([app]))}, click-beast {:protocol-inline nil, :meta {:file "/d/code/clojure/beasts/src/beasts/core.cljs", :line 72, :column 7, :end-line 72, :end-column 18, :arglists (quote ([app beast e]))}, :name beasts.core/click-beast, :variadic false, :file "src/beasts/core.cljs", :end-column 18, :method-params ([app beast e]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 72, :end-line 72, :max-fixed-arity 3, :fn-var true, :arglists (quote ([app beast e]))}, beast-title {:protocol-inline nil, :meta {:file "/d/code/clojure/beasts/src/beasts/core.cljs", :line 37, :column 7, :end-line 37, :end-column 18, :arglists (quote ([{:keys [beast-name allegiance]}]))}, :name beasts.core/beast-title, :variadic false, :file "src/beasts/core.cljs", :end-column 18, :method-params ([p__3268314]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 37, :end-line 37, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [beast-name allegiance]}]))}, beasts {:protocol-inline nil, :meta {:file "/d/code/clojure/beasts/src/beasts/core.cljs", :line 143, :column 7, :end-line 143, :end-column 13, :arglists (quote ([app]))}, :name beasts.core/beasts, :variadic false, :file "src/beasts/core.cljs", :end-column 13, :method-params ([app]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 143, :end-line 143, :max-fixed-arity 1, :fn-var true, :arglists (quote ([app]))}, toggle-card {:protocol-inline nil, :meta {:file "/d/code/clojure/beasts/src/beasts/core.cljs", :line 13, :column 7, :end-line 13, :end-column 18, :arglists (quote ([beasts id]))}, :name beasts.core/toggle-card, :variadic false, :file "src/beasts/core.cljs", :end-column 18, :method-params ([beasts id]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 13, :end-line 13, :max-fixed-arity 2, :fn-var true, :arglists (quote ([beasts id]))}, render-sorts {:protocol-inline nil, :meta {:file "/d/code/clojure/beasts/src/beasts/core.cljs", :line 129, :column 7, :end-line 129, :end-column 19, :arglists (quote ([app beasts]))}, :name beasts.core/render-sorts, :variadic false, :file "src/beasts/core.cljs", :end-column 19, :method-params ([app beasts]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 129, :end-line 129, :max-fixed-arity 2, :fn-var true, :arglists (quote ([app beasts]))}, search {:protocol-inline nil, :meta {:file "/d/code/clojure/beasts/src/beasts/core.cljs", :line 100, :column 7, :end-line 100, :end-column 13, :arglists (quote ([app e]))}, :name beasts.core/search, :variadic false, :file "src/beasts/core.cljs", :end-column 13, :method-params ([app e]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 100, :end-line 100, :max-fixed-arity 2, :fn-var true, :arglists (quote ([app e]))}, visible-beast-view {:protocol-inline nil, :meta {:file "/d/code/clojure/beasts/src/beasts/core.cljs", :line 60, :column 7, :end-line 60, :end-column 25, :arglists (quote ([{:keys [card-visible? beast-name power age size magic-level fright-factor], :as beast}]))}, :name beasts.core/visible-beast-view, :variadic false, :file "src/beasts/core.cljs", :end-column 25, :method-params ([p__3268608]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 60, :end-line 60, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [card-visible? beast-name power age size magic-level fright-factor], :as beast}]))}, app-state {:name beasts.core/app-state, :file "src/beasts/core.cljs", :line 8, :column 1, :end-line 8, :end-column 19, :meta {:file "/d/code/clojure/beasts/src/beasts/core.cljs", :line 8, :column 10, :end-line 8, :end-column 19}, :tag any}, on-js-reload {:protocol-inline nil, :meta {:file "/d/code/clojure/beasts/src/beasts/core.cljs", :line 166, :column 7, :end-line 166, :end-column 19, :arglists (quote ([]))}, :name beasts.core/on-js-reload, :variadic false, :file "src/beasts/core.cljs", :end-column 19, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 166, :end-line 166, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, search-beasts {:protocol-inline nil, :meta {:file "/d/code/clojure/beasts/src/beasts/core.cljs", :line 19, :column 7, :end-line 19, :end-column 20, :arglists (quote ([search beasts]))}, :name beasts.core/search-beasts, :variadic false, :file "src/beasts/core.cljs", :end-column 20, :method-params ([search beasts]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 19, :end-line 19, :max-fixed-arity 2, :fn-var true, :arglists (quote ([search beasts]))}, sort-beasts {:protocol-inline nil, :meta {:file "/d/code/clojure/beasts/src/beasts/core.cljs", :line 28, :column 7, :end-line 28, :end-column 18, :arglists (quote ([sort-key beasts]))}, :name beasts.core/sort-beasts, :variadic false, :file "src/beasts/core.cljs", :end-column 18, :method-params ([sort-key beasts]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 28, :end-line 28, :max-fixed-arity 2, :fn-var true, :arglists (quote ([sort-key beasts]))}}, :cljs.spec/registry-ref [], :require-macros {r reagent.core, reagent.core reagent.core}, :cljs.analyzer/constants {:seen #{:h1.beast-name :div.cp :card-visible? :div.filters.row :div.logo :div.col-12 :visible? :age :key :div.col-12.col-sm-12.col-md-2 :placeholder :series :allegiance :filters :h2.score :div.beasts.row :magic-level :value :width :beasts :type :src :fright-factor :on-click :size :title :background-image :style :div :div.sorts.row :power :total :div.main :class :image :div.col-xl-4.col-lg-6.col-md-6.col-sm-12.col-12.beast :sort-by :input :beast-name :div.search.row :on-change :background-size :img :span}, :order [:title :filters :sort-by :beasts :beast-name :card-visible? :visible? :total :power :age :size :magic-level :fright-factor :allegiance :h1.beast-name :img :src :width :h2.score :span :image :div :class :key :style :background-image :background-size :series :div.col-xl-4.col-lg-6.col-md-6.col-sm-12.col-12.beast :on-click :div.search.row :div.col-12 :input :on-change :type :placeholder :div.filters.row :div.col-12.col-sm-12.col-md-2 :value :div.sorts.row :div.main :div.logo :div.cp :div.beasts.row]}, :doc nil}